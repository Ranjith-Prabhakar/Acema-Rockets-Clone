take the live server extention and click on the setting icon and type reload full as a suffix to what we see there and make the check box selected
1. installation =>npx tailwindcss init
1.1 create a build directory and src directory
1.2 in build directory create a index.html
1.3 in src create a input.css
2.make the tailwind to know where the classes should run =
  go to tailwind.config.js=>/** @type {import('tailwindcss').Config} */
  module.exports = {
    content: ['./build/*.html'], // it says that apply the classes for all html pages in this particular directory
    theme: {
      extend: {},
    },
    plugins: [],
  }
3.create a input.css file in src folder and import some css modules
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  
  // now the css file will have errors but we can resolve it => file>preference>settings>search for "unknown">we will get a
  // a result as css>lint:unknown at rules set it to ignore from warnig
4.npx tailwindcss -i ./src/input.css -o ./build/css/style.css => here we are saying that we have to take an input file from
  ./src/input.css and have to process and build an output file at ./build/css/style.css (it will create a folder css in build directory)

5. go to index.html and insert the link tag for css and put the "css/style.css" in href
6. for each time when we make updates we have to compail it by using npx tailwindcss -i ./src/input.css -o ./build/css/style.css
7. to avoid the compailation for any changes manually we can use a watch function then it will watch and compail the 
    changes automatically
    npx tailwindcss -i ./src/input.css -o ./build/css/style.css  --watch
8.to create our own classes go to input.css in src and create there (before creating it confirm it is not a reserved one )
9.it may become too messy when we insert too many classes to avoid it we can add an extention calls inline fold
10.initialise the project npm init -y
11. make a tailwind running script in package.json
  "scripts": {
    "tailwind": "npx tailwindcss -i ./src/input.css -o ./build/css/style --watch"
  },
12.install a package npm i -D prettier-plugin-tailwindcss for
13.create a gitignore file and add node module before creating git repository
14.add one more script   "scripts": {
    "tailwind": "npx tailwindcss -i ./src/input.css -o ./build/css/style --watch",
    "prettier":"npx prettier --write **/*.html"
  },
  here we installed prettier plug in for auto arranging the class lists what we uses here according to the 
  tailwind ordering 
15.we can run any of the script at once 
16.run tailwind  npm run tailwind

